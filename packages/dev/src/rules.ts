import { logger } from "@/logger/index.js"
import {
  existsSync,
  mkdirSync,
  readdirSync,
  readFileSync,
  writeFileSync,
} from "node:fs"
import { join } from "node:path"

/**
 * Copy all markdown rule files inside the rules dir at workspace root
 * into the git-ignored config folder or file of many llm tools including:
 *
 * - RooCode,    at `.roo/rules`, a dir.
 * - ClaudeCode, at `CLAUDE.md`,  a single file.
 * - QwenCode,   at `QWEN.md`,    a single file.
 *
 * to guide those models to follow such configured specifications,
 * in order to improve the quality of code generated by those models.
 *
 * When it's a folder, just copy all files into it.
 * When it's a single file, just concatenate all files content into it,
 * splitted by a separate line (`---`).
 *
 * @param root the root dirpath of the workspace, default to cwd.
 */
export function prepareRules(root?: string) {
  const workspaceRoot = root ?? process.cwd()
  const rulesDir = join(workspaceRoot, "rules")

  // Check if rules directory exists
  if (!existsSync(rulesDir)) {
    logger.warn(`Rules directory not found at: ${rulesDir}`)
    return
  }

  // Get all markdown files from rules directory
  const ruleFiles = readdirSync(rulesDir)
    .filter((file) => file.endsWith(".md"))
    .sort()

  if (ruleFiles.length === 0) {
    logger.warn(`No markdown files found in rules directory: ${rulesDir}`)
    return
  }

  // Prepare RooCode rules (folder-based)
  const rooRulesDir = join(workspaceRoot, ".roo", "rules")
  mkdirSync(rooRulesDir, { recursive: true })

  for (const file of ruleFiles) {
    const sourcePath = join(rulesDir, file)
    const targetPath = join(rooRulesDir, file)
    const content = readFileSync(sourcePath, "utf-8")
    writeFileSync(targetPath, content, "utf-8")
  }

  // Prepare ClaudeCode rules (single file)
  const claudeFile = join(workspaceRoot, "CLAUDE.md")
  const claudeContent = ruleFiles
    .map((file) => {
      const content = readFileSync(join(rulesDir, file), "utf-8")
      return content
    })
    .join("\n\n---\n\n")
  writeFileSync(claudeFile, claudeContent, "utf-8")

  // Prepare QwenCode rules (single file)
  const qwenFile = join(workspaceRoot, "QWEN.md")
  const qwenContent = ruleFiles
    .map((file) => {
      const content = readFileSync(join(rulesDir, file), "utf-8")
      return content
    })
    .join("\n\n---\n\n")
  writeFileSync(qwenFile, qwenContent, "utf-8")

  logger.info(`Prepared rules for ${ruleFiles.length} files`)
  logger.info(`- RooCode: ${rooRulesDir}`)
  logger.info(`- ClaudeCode: ${claudeFile}`)
  logger.info(`- QwenCode: ${qwenFile}`)
}
